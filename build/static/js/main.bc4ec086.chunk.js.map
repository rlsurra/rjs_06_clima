{"version":3,"sources":["components/Header.js","components/Error.js","components/Formulario.js","components/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","setBusqueda","setConsultar","ciudad","pais","useState","error","setError","handleChangeBusqueda","e","target","name","value","onSubmit","preventDefault","type","id","onChange","htmlFor","Clima","respuestaAPI","main","parseFloat","temp","toFixed","temp_max","temp_min","App","consultar","setRespuestaAPI","useEffect","a","url","console","log","fetch","respuesta","json","resultado","cod","consultarAPI","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2MAiBeA,EAdA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OACI,6BACI,yBAAKC,UAAU,mCACX,uBAAGC,KAAK,KAAKD,UAAU,cAAcD,M,cCMtCG,EAVD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZ,OACI,uBAAGH,UAAU,sBAAb,IAAoCG,EAApC,MC0EOC,EA3EI,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,SAASC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aAE/BC,EAAeH,EAAfG,OAAOC,EAAQJ,EAARI,KAF0C,EAI/BC,oBAAS,GAJsB,mBAIjDC,EAJiD,KAI3CC,EAJ2C,KAMlDC,EAAuB,SAAAC,GACzBR,EAAY,2BACLD,GADI,kBAENS,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAenC,OACI,0BACIC,SAba,SAAAJ,GACjBA,EAAEK,iBAEY,KAAXX,GAA0B,KAATC,GAIpBG,GAAS,GACTL,GAAa,IAJTK,GAAS,KAWRD,EAAQ,kBAAC,EAAD,CAAOR,QAAQ,sCAAyC,KACjE,yBAAKH,UAAU,uBACX,2BACIoB,KAAK,OACLJ,KAAK,SACLK,GAAG,SACHJ,MAAOT,EACPc,SAAUT,IAEd,2BAAOU,QAAQ,UAAf,cAEJ,yBAAKvB,UAAU,uBACX,4BACIgB,KAAK,OACLK,GAAG,OACHJ,MAAOR,EACPa,SAAUT,GAEV,4BAAQI,MAAM,IAAd,4BACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YAEJ,2BAAOM,QAAQ,QAAf,YAEJ,yBAAKvB,UAAU,uBACX,2BACIoB,KAAK,SACLH,MAAM,eACNjB,UAAU,oEC/BfwB,EA/BD,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAELT,EAAaS,EAAbT,KAAKU,EAAQD,EAARC,KAEZ,IAAIV,EAAM,OAAO,KAKjB,OACI,yBAAKhB,UAAU,4BACX,yBAAKA,UAAU,cACX,4CAAkBgB,EAAlB,SACA,uBAAGhB,UAAU,eACR2B,WAAWD,EAAKE,KAPlB,OAOgC,IAAIC,QAAQ,GAD/C,IACmD,2CAEnD,+CACKF,WAAWD,EAAKI,SAVlB,OAUoC,IAAID,QAAQ,GADnD,IACuD,2CAEvD,gDACKF,WAAWD,EAAKK,SAblB,OAaoC,IAAIF,QAAQ,GADnD,IACuD,8CC0DxDG,MA3Ef,WAAgB,IAAD,EAEkBtB,mBAAS,CACtCF,OAAQ,GACRC,KAAM,KAJK,mBAENJ,EAFM,KAEGC,EAFH,KAMNE,EAAeH,EAAfG,OAAOC,EAAQJ,EAARI,KAND,EAQoBC,oBAAS,GAR7B,mBAQNuB,EARM,KAQI1B,EARJ,OAU0BG,mBAAS,IAVnC,mBAUNe,EAVM,KAUOS,EAVP,OAYYxB,oBAAS,GAZrB,mBAYNC,EAZM,KAYAC,EAZA,KAyCb,OA3BAuB,qBAAU,YACY,uCAAG,gCAAAC,EAAA,0DAEdH,EAFc,uBAGC,mCACRI,EAAM,qDAAqD7B,EAAO,IAAIC,EAAhE,0CACZ6B,QAAQC,IAAIF,GALC,SAOWG,MAAMH,GAPjB,cAOPI,EAPO,gBAQWA,EAAUC,OARrB,OAQPC,EARO,OAUbT,EAAgBS,GAChBpC,GAAa,GAEQ,MAAlBoC,EAAUC,IACXhC,GAAS,GAETA,GAAS,GAhBE,4CAAH,qDAsBlBiC,KAEF,CAACZ,IAGC,kBAAC,WAAD,KAEI,kBAAC,EAAD,CACIlC,OAAO,gBAGX,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CACIK,SAAUA,EACVC,YAAaA,EACbC,aAAcA,KAGtB,yBAAKP,UAAU,cAETW,EACA,kBAAC,EAAD,CAAOR,QAAQ,kCAEf,kBAAC,EAAD,CAAOsB,aAAcA,UCzD7BqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnD,GACL2B,QAAQ3B,MAAMA,EAAMoD,a","file":"static/js/main.bc4ec086.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = ({titulo}) => {\r\n    return ( \r\n        <nav>\r\n            <div className=\"nav-wrapper light-blue darken-2\">\r\n                <a href=\"#!\" className=\"brand-logo\">{titulo}</a>\r\n            </div>\r\n        </nav>\r\n     );\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo : PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <p className=\"red darken-4 error\"> {mensaje} </p>\r\n     );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;","import React,{useState} from 'react';\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({busqueda,setBusqueda,setConsultar}) => {\r\n\r\n    const {ciudad,pais} = busqueda\r\n\r\n    const [error,setError] = useState(false);\r\n\r\n    const handleChangeBusqueda = e => {\r\n        setBusqueda({\r\n            ...busqueda,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        //Validar Formulario\r\n        if(ciudad === '' || pais === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        setConsultar(true); //Consulto la API solo cuando se submitea\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {error ? <Error mensaje=\"Todos los campos son obligatorios\" /> : null}\r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"ciudad\"\r\n                    id=\"ciudad\"\r\n                    value={ciudad}\r\n                    onChange={handleChangeBusqueda}\r\n                />\r\n                <label htmlFor=\"ciudad\"> Ciudad: </label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <select\r\n                    name=\"pais\"\r\n                    id=\"pais\"\r\n                    value={pais}\r\n                    onChange={handleChangeBusqueda}\r\n                >\r\n                    <option value=\"\">-- Seleccione un pais --</option>\r\n                    <option value=\"US\">Estados Unidos</option>\r\n                    <option value=\"MX\">México</option>\r\n                    <option value=\"AR\">Argentina</option>\r\n                    <option value=\"CO\">Colombia</option>\r\n                    <option value=\"CR\">Costa Rica</option>\r\n                    <option value=\"ES\">España</option>\r\n                    <option value=\"PE\">Perú</option>\r\n                </select>\r\n                <label htmlFor=\"pais\"> Pais: </label>\r\n            </div>\r\n            <div className=\"input-field col s12\">\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"Buscar clima\"\r\n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\r\n                />\r\n            </div>\r\n              \r\n        </form>\r\n     );\r\n}\r\n \r\nFormulario.propTypes = {\r\n    busqueda: PropTypes.object.isRequired,\r\n    setBusqueda: PropTypes.func.isRequired,\r\n    setConsultar: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Clima = ({respuestaAPI}) => {\r\n\r\n    const {name,main} = respuestaAPI;\r\n\r\n    if(!name) return null;\r\n\r\n    //Kelvin to ºC\r\n    const kelvin = 273.15;\r\n\r\n    return ( \r\n        <div className=\"card-panel white col s12\">\r\n            <div className=\"black-text\">\r\n                <h2> El clima de {name} es: </h2>\r\n                <p className=\"temperatura\">\r\n                    {parseFloat(main.temp - kelvin,10).toFixed(2)} <span> &#x2103; </span>\r\n                </p>\r\n                <p> Temperatura MAX:\r\n                    {parseFloat(main.temp_max - kelvin,10).toFixed(2)} <span> &#x2103; </span>\r\n                </p>\r\n                <p> Tempereatura MIN:\r\n                    {parseFloat(main.temp_min - kelvin,10).toFixed(2)} <span> &#x2103; </span>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nClima.propTypes = {\r\n    respuestaAPI: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Clima;","import React, {Fragment,useState,useEffect} from 'react';\nimport Header from './components/Header'\nimport Formulario from './components/Formulario'\nimport Clima from './components/Clima'\nimport Error from './components/Error';\n\nfunction App() {\n\n  const [busqueda,setBusqueda] = useState({\n    ciudad: '',\n    pais: ''\n  })\n  const {ciudad,pais} = busqueda\n\n  const [consultar,setConsultar] = useState(false);\n\n  const [respuestaAPI,setRespuestaAPI] = useState({});\n\n  const [error,setError] = useState(false);\n\n  useEffect(() => {\n      const consultarAPI = async () => {\n\n          if(consultar){\n              const appId = \"dfe771991f8d2c3ac8beabf06fdc9b65\";\n              const url = \"https://api.openweathermap.org/data/2.5/weather?q=\"+ciudad+\",\"+pais+\"&appid=\"+appId;\n              console.log(url);\n              \n              const respuesta = await fetch(url);\n              const resultado = await respuesta.json()\n\n              setRespuestaAPI(resultado);\n              setConsultar(false);\n\n              if(resultado.cod !== 200){\n                setError(true);\n              }else{\n                setError(false);\n              }\n\n          }\n\n      }\n      consultarAPI();\n  // eslint-disable-next-line\n  },[consultar])\n\n  return (\n      <Fragment>\n\n          <Header \n              titulo=\"Clima React\"\n          />\n\n          <div className=\"contenedor-form\">\n              <div className=\"containaer\">\n                  <div className=\"row\">\n                      <div className=\"col m6 s12\">\n                          <Formulario\n                              busqueda={busqueda}\n                              setBusqueda={setBusqueda}\n                              setConsultar={setConsultar}\n                          />\n                      </div>\n                      <div className=\"col m6 s12\">\n                          {\n                            error ?\n                            <Error mensaje=\"No se ha encontrado la ciudad\" />\n                            :\n                            <Clima respuestaAPI={respuestaAPI} />\n                          }\n\n                      </div>                      \n                  </div>\n              </div>\n          </div>\n\n      </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}